
import java_cup.runtime.*;
import absyn.*;

parser code {:

    public void report_error(String message, Object info) {
        int errorType = 0;
        String errorName = "";

        StringBuffer msg = new StringBuffer("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            errorType = s.sym;

            if(errorType == 1){errorName = "Error";}
            else if(errorType == 2){errorName = "If";}
            else if(errorType == 3){errorName = "Int";}
            else if(errorType == 4){errorName = "Else";}
            else if(errorType == 7){errorName = "While";}
            else if(errorType == 8){errorName = "=";}
            else if(errorType == 9){errorName = "==";}
            else if(errorType == 11){errorName = "<";}
            else if(errorType == 12){errorName = ">";}
            else if(errorType == 13){errorName = "<=";}
            else if(errorType == 14){errorName = ">=";}
            else if(errorType == 15){errorName = "+";}
            else if(errorType == 16){errorName = "-";}
            else if(errorType == 17){errorName = "*";}
            else if(errorType == 18){errorName = "/";}
            else if(errorType == 19){errorName = "(";}
            else if(errorType == 20){errorName = ")";}
            else if(errorType == 21){errorName = "[";}
            else if(errorType == 22){errorName = "]";}
            else if(errorType == 23){errorName = "{";}
            else if(errorType == 24){errorName = "}";}
            else if(errorType == 25){errorName = ",";}
            else if(errorType == 26){errorName = ";";}
            else if(errorType == 27){errorName = "ID";}
            else if(errorType == 28){errorName = "NUM";}
            if (s.left >= 0) {
                msg.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    msg.append(", column "+(s.right+1));
            }
        }

        msg.append(" : "+message + "("+ errorType + ")" + "(" + errorName + ")");
        System.err.println(msg);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


:};


/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal IF, INT, ELSE, VOID, RETURN, WHILE;
terminal ASSIGN, EQ, NEQ, LT, GT, LTE, GTE, PLUS, MINUS, TIMES, DIV, LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACE, RBRACE, COMMA, SEMI;
terminal String ID, NUM;
terminal ERROR;

non terminal  ExpList args, arg_list, stmt_list;
non terminal  DecList program, declar_list;
non terminal  Dec declar,  fun_declar;
non terminal  VarDecList params, param_list, loc_declar;
non terminal  VarDec var_declar, param;
non terminal  Var var;
non terminal  NameTy type_spec;
non terminal  CompoundExp comp_stmt;
non terminal  Exp   stmt, select_stmt, iter_stmt, return_stmt, exp_stmt;
non terminal  Exp   exp, simple_exp, add_exp, call, term, factor, error_stmt;

start with program;
/* ----------------------------Grammar Section-------------------- */

program	     ::= declar_list:s
                {: RESULT = s;
                Syntax temp = new Syntax(RESULT);
                // Storing all declarations in hash tables and finding sytax errors
                temp.storeHash();

                // Display the number of errors in the program
                if(Syntax.errorCount > 0){
                  System.out.println( Syntax.errorCount + " errors");
                }
                // Print out the abstract syntax tree if in -a mode and no errors found
                if(Scanner.mode == 0 && Syntax.errorCount == 0){
                  System.out.println( "The abstract syntax tree is:" );
                  Absyn.showTree( RESULT, 0 );
                }
                :}
               ;

declar_list     ::= declar_list:s1 declar:s2
                {:
                  DecList t = s1;
                   while( t.tail != null )
                     t = t.tail;
                   t.tail = new DecList(s2, null);
                   RESULT = s1;
                :}
                | declar:s {: RESULT = new DecList(s, null); :}
                | error:e SEMI declar {:  parser.report_error("invalid", e); :}
                | error:e declar {: parser.report_error("invalid", e); :}
                ;

declar         ::= var_declar:v {:  RESULT = v; :}
                | fun_declar:f {: RESULT = f; :}
                 ;

var_declar      ::= type_spec:t ID:i SEMI {: RESULT =  new SimpleDec(tleft, t, i); :}
                | type_spec:t ID:i LSQUARE NUM:n RSQUARE SEMI {: RESULT = new ArrayDec(tleft, t, i, new IntExp(nleft,n)); :}
               ;

type_spec      ::= INT:i {: RESULT = new NameTy(ileft, 0); :}
                | VOID:i {: RESULT = new NameTy(ileft, 1); :}
               ;

fun_declar     ::= type_spec:t ID:i LPAREN params:p RPAREN comp_stmt:c {: RESULT = new FunctionDec(tleft, t, i, p, c); :}
               ;

params         ::= param_list:p {: RESULT = p; :}
                | VOID {: RESULT = new VarDecList(null,null); :}
               ;

param_list     ::= param_list:p1 COMMA param:p2 {:
                  VarDecList t = p1;
                  while( t.tail != null )
                    t = t.tail;
                  t.tail = new VarDecList(p2, null);
                  RESULT = p1; :}
                | param:p {: RESULT = new VarDecList(p,null); :}
               ;

param          ::= type_spec:t ID:i {: RESULT = new SimpleDec(tleft,t,i); :}
                | type_spec:t ID:i LSQUARE RSQUARE {: RESULT = new ArrayDec(tleft, t, i, new IntExp(tleft,null)); :}
               ;

comp_stmt      ::= LBRACE:b loc_declar:l stmt_list:s RBRACE {:  RESULT = new CompoundExp(bleft,l,s);
                  :}
               ;

loc_declar     ::= loc_declar:l var_declar:v {:
                  VarDecList t = l;
                  while( t.tail != null )
                    t = t.tail;
                  t.tail = new VarDecList(v, null);
                  RESULT = l; :}
                | {:  RESULT = new VarDecList(null,null); :}
               ;

stmt_list      ::= stmt_list:s1 stmt:s2 {:
                  ExpList t = s1;
                  while( t.tail != null )
                    t = t.tail;
                  t.tail = new ExpList(s2, null);
                  RESULT = s1; :}
                | {: RESULT = new ExpList(null,null); :}
               ;

stmt            ::= exp_stmt:e {: RESULT = e; :}| comp_stmt:c {: RESULT = c; :}| select_stmt:s {: RESULT = s; :}| iter_stmt:i {: RESULT = i; :}| return_stmt:r {: RESULT = r; :}
                ;

exp_stmt        ::= exp:e SEMI {: RESULT = e; :}
                | SEMI {: RESULT = null; :}
                ;

select_stmt     ::= IF:i LPAREN exp:e RPAREN stmt:s {: RESULT = new IfExp(ileft, e, s, null); :}
                | IF:i LPAREN exp:e RPAREN stmt:s1 ELSE stmt:s2 {: RESULT = new IfExp(ileft, e, s1, s2); :}
                ;

iter_stmt       ::= WHILE:w LPAREN exp:e RPAREN stmt:s {: RESULT = new WhileExp(wleft,e,s); :}
                ;

return_stmt     ::= RETURN:r SEMI {:  RESULT = new ReturnExp(rleft, null); :}
                | RETURN:r exp:e SEMI {: RESULT = new ReturnExp(rleft, e); :}
                ;

exp             ::= var:v ASSIGN exp:e {:  RESULT = new AssignExp(vleft, v, e); :}
                | simple_exp:s {: RESULT = s; :}
                | error:e
                ;

var             ::= ID:i {: RESULT = new SimpleVar(ileft, i); :}
                | ID:i LSQUARE exp:e RSQUARE {: RESULT = new IndexVar(ileft,i,e); :}
                ;

simple_exp      ::= add_exp:s1 LTE add_exp:s2 {: RESULT = new OpExp(s1left, s1, OpExp.LTE, s2); :}
                | add_exp:s1 LT add_exp:s2 {: RESULT = new OpExp(s1left, s1, OpExp.LT, s2); :}
                | add_exp:s1 GT add_exp:s2 {: RESULT = new OpExp(s1left, s1, OpExp.GT, s2); :}
                | add_exp:s1 GTE add_exp:s2 {: RESULT = new OpExp(s1left, s1, OpExp.GTE, s2); :}
                | add_exp:s1 EQ add_exp:s2 {: RESULT = new OpExp(s1left, s1, OpExp.EQ, s2); :}
                | add_exp:s1 NEQ add_exp:s2 {: RESULT = new OpExp(s1left, s1, OpExp.NEQ, s2); :}
                | add_exp:s {: RESULT = s; :}
                ;

add_exp         ::= add_exp:s PLUS term:t {: RESULT = new OpExp(sleft, s, OpExp.PLUS, t); :}
                | add_exp:s MINUS term:t {: RESULT = new OpExp(sleft, s, OpExp.MINUS, t); :}
                | term:t {: RESULT = t; :}
                ;

term            ::= term:t TIMES factor:f {: RESULT = new OpExp(tleft, t, OpExp.TIMES, f); :}
                | term:t DIV factor:f {: RESULT = new OpExp(tleft, t, OpExp.DIV, f); :}
                | factor:f {: RESULT = f; :}
                ;

factor          ::= LPAREN exp:e RPAREN {: RESULT = e; :}
                | var:v {: RESULT = new VarExp(vleft,v); :}
                | call:c {: RESULT = c; :}
                | NUM:n {: RESULT = new IntExp(nleft, n); :}
                ;

call            ::= ID:i LPAREN args:a RPAREN {: RESULT =  new CallExp(ileft, i, a);  :}
                ;

args            ::= arg_list:a {: RESULT = a; :}| {: RESULT = new ExpList(null,null); :}
                ;

arg_list        ::= arg_list:a COMMA exp:e
              {:  ExpList t = a;
                  while( t.tail != null )
                    t = t.tail;
                  t.tail = new ExpList(e, null);
                  RESULT = a; :}
                | exp:e {: RESULT = new ExpList(e,null); :}
                ;

error_stmt      ::= ERROR {: System.out.println("Error"); :}
                ;
